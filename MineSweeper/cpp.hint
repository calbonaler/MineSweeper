// ヒント ファイルは、Visual Studio IDE が Visual C++ 識別子を解釈するのに役立ちます
// 関数およびマクロの名前などです。
// 詳細については次を参照してください https://go.microsoft.com/fwlink/?linkid=865984
#define ALLOW_ENUM_FLAG_OPERATIONS(EnumType) constexpr inline EnumType operator ~(EnumType value) noexcept { return static_cast<EnumType>(~static_cast<std::underlying_type<EnumType>::type>(value)); } constexpr inline EnumType operator &(EnumType left, EnumType right) noexcept { return static_cast<EnumType>(static_cast<std::underlying_type<EnumType>::type>(left) & static_cast<std::underlying_type<EnumType>::type>(right)); } constexpr inline EnumType operator ^(EnumType left, EnumType right) noexcept { return static_cast<EnumType>(static_cast<std::underlying_type<EnumType>::type>(left) ^ static_cast<std::underlying_type<EnumType>::type>(right)); } constexpr inline EnumType operator |(EnumType left, EnumType right) noexcept { return static_cast<EnumType>(static_cast<std::underlying_type<EnumType>::type>(left) | static_cast<std::underlying_type<EnumType>::type>(right)); } constexpr inline EnumType& operator &=(EnumType& left, EnumType right) noexcept { return left = left & right; } constexpr inline EnumType& operator ^=(EnumType& left, EnumType right) noexcept { return left = left ^ right; } constexpr inline EnumType& operator |=(EnumType& left, EnumType right) noexcept { return left = left | right; }
